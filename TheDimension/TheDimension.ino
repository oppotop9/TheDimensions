#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Arduino.h>
#include <SPI.h>

//เรียก i2c addr 0x70 
#define I2CScanner 0x70
//เรียกใช้ OLED
Adafruit_SSD1306 display0 = Adafruit_SSD1306(128, 64, &Wire);
Adafruit_SSD1306 display1 = Adafruit_SSD1306(128, 32, &Wire);
Adafruit_SSD1306 display2 = Adafruit_SSD1306(128, 32, &Wire);
Adafruit_SSD1306 display3 = Adafruit_SSD1306(128, 32, &Wire);
Adafruit_SSD1306 display4 = Adafruit_SSD1306(128, 32, &Wire);
//เรียกใช้ Pin Button
#define ButtonBlue 14
#define ButtonRed 15
#define ButtonYellow  16
#define ButtonGreen  17
int ButtonA = 0; //1
//----------------------------------------------
int Xnum;
int XHp;
int XDoor;
int XGem;
int XShield;
int XFreze;
int Xstart;
int XnextGem;

int roll;
int rollS;
int next;
int End;

int BossA;
int BossB;
int BossC;
int BossD;

int Astart = 1 ;
int Anum;
int AHp;
int AGem;
int ADoor;
int AShield;
int AFreze;

int Bstart = 11 ;
int Bnum;
int BHp;
int BGem;
int BDoor;
int BShield;
int BFreze;

int Cstart = 21 ;
int Cnum;
int CHp;
int CGem;
int CDoor;
int CShield;
int CFreze;

int Dstart = 31 ;
int Dnum;
int DHp;
int DGem;
int DDoor;
int DShield;
int DFreze;

int AHoldInTime;
int AToxicZone;
int ARewindTime;
int ADoubleTime;
int ATimeBolt;

int BHoldInTime;
int BToxicZone;
int BRewindTime;
int BDoubleTime;
int BTimeBolt;

int CHoldInTime;
int CToxicZone;
int CRewindTime;
int CDoubleTime;
int CTimeBolt;

int DHoldInTime;
int DToxicZone;
int DRewindTime;
int DDoubleTime;
int DTimeBolt;


//เรียกใช้ RGB pin
int RGB_R_Player1 = 2;
int RGB_G_Player1 = 3;
int RGB_B_Player1 = 4;
int RGB_R_Player2 = 5;
int RGB_G_Player2 = 6;
int RGB_B_Player2 = 7;
int RGB_R_Player3 = 8;
int RGB_G_Player3 = 9;
int RGB_B_Player3 = 10;
int RGB_R_Player4 = 11;
int RGB_G_Player4 = 12;
int RGB_B_Player4 = 13;

int Abosslight = 30;
int Bbosslight = 32;
int Cbosslight = 34;
int Dbosslight = 36;
//Dice For Random-----------------------------------------------------------------------------
//1
const unsigned char OneDice [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 
};
//2
const unsigned char TwoDice [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
};
//3
const unsigned char ThreeDice [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
};
//4
const unsigned char FourDice [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
};
//5
const unsigned char FiveDice [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
};
//6
const unsigned char SixDice [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
};
//Skill-------------------------------------------------------------------------------------------
//Hold in Time  
const unsigned char OledHoldInTime [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x30, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xbf, 0xb8, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7c, 0xdc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xfc, 0x64, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xfc, 0x36, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xfc, 0x16, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xfc, 0x16, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xff, 0xf6, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xff, 0xf6, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xff, 0xf6, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xff, 0xe6, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xff, 0xec, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xdc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9f, 0x38, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x70, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//Toxic Zone 
const unsigned char OledToxicZone [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0e, 0x40, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0f, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xcf, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfd, 0x64, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xcd, 0x7c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x7c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x2c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x3c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x7c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//Rewind time 
const unsigned char OledRewindTime [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x3c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x3c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x78, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//Protect your time 
const unsigned char OledProtectYourTime [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xc0, 0xdc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x80, 0x74, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x24, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x64, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc0, 0x84, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x33, 0x18, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x70, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//Double time 
const unsigned char OledDoubleTime [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x87, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf3, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9, 0xf8, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9, 0xf8, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf3, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x86, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//TimeBolt
const unsigned char OledTimeBolt  [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9f, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x07, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xd1, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbb, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x38, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//เรียกใช้ i2c TCA9548A--------------------------------------------------------------------------
void TCA9548A(uint8_t bus)
{
  Wire.beginTransmission(0x70);
  Wire.write(1 << bus);
  Wire.endTransmission();
}
//Set up-----------------------------------------------------------------------------------
void setup(){
Serial.begin(9600);
randomSeed(analogRead(0));
Wire.begin(); //ใช้คำสั่งเริ่มต้นการใช้งาน I2C โดยใช้ค่าในพารามิเตอร์เป็นค่าเริ่มต้นทั้งหมด
//Set multiplexer to channel and initialize OLED-() with I2C addr 0x3C
  TCA9548A(0);
  display0.begin(I2CScanner, 0x3C);
  TCA9548A(1);
  display1.begin(I2CScanner, 0x3C);
  TCA9548A(2);
  display2.begin(I2CScanner, 0x3C);
  TCA9548A(3);
  display3.begin(I2CScanner, 0x3C);
  TCA9548A(4);
  display4.begin(I2CScanner, 0x3C);
//--------The Dimenstion4------------------------------
  TCA9548A(0);
  TheDimenstion0();
  display0.display();
  TCA9548A(1);
  TheDimenstion1();
  display1.display();
  TCA9548A(2);
  TheDimenstion2();
  display2.display(); 
  TCA9548A(3);
  TheDimenstion3();
  display3.display();
  TCA9548A(4);
  TheDimenstion4();
  display4.display();
//---------------RGB---------------------
pinMode(RGB_R_Player1,OUTPUT);
pinMode(RGB_G_Player1,OUTPUT);
pinMode(RGB_B_Player1,OUTPUT);
pinMode(RGB_R_Player2,OUTPUT);
pinMode(RGB_G_Player2,OUTPUT);
pinMode(RGB_B_Player2,OUTPUT);
pinMode(RGB_R_Player3,OUTPUT);
pinMode(RGB_G_Player3,OUTPUT);
pinMode(RGB_B_Player3,OUTPUT);
pinMode(RGB_R_Player4,OUTPUT);
pinMode(RGB_G_Player4,OUTPUT);
pinMode(RGB_B_Player4,OUTPUT);
pinMode (Abosslight,OUTPUT);
pinMode (Bbosslight,OUTPUT);
pinMode (Cbosslight,OUTPUT);
pinMode (Dbosslight,OUTPUT);

//------------------------------------------------------
Anum=Astart; //player1
Bnum=Bstart; //player2
Cnum=Cstart; //player3
Dnum=Dstart; //player4

ButtonA=0;
    for(int i = 0 ; i <=4 ; i++){
if(digitalRead(ButtonBlue)==0 && digitalRead(ButtonRed)==0){
while (digitalRead(ButtonBlue)==0  && digitalRead(ButtonRed)==0 ) {}
}
if (i == 1 && digitalRead(ButtonRed)==0 ) {
  TCA9548A(0);
  display0.clearDisplay();
  display0.setCursor(0,0);
  display0.setTextColor(1);
  display0.setTextSize(1);
  display0.print("Choose The Number\n\nOf Players");
  display0.setCursor(52,36);
  display0.setTextColor(1);
  display0.setTextSize(2);
  display0.print("2");
  display0.display();
     ButtonA=0;
     delay(500);
}else if(i == 2 && digitalRead(ButtonRed)==0)
{
    TCA9548A(0);
    display0.clearDisplay();
    display0.setCursor(0,0);
    display0.setTextColor(1);
    display0.setTextSize(1);
    display0.print("Choose The Number\n\nOf Players");
    display0.setCursor(52,36);
    display0.setTextColor(1);
    display0.setTextSize(2);
    display0.print("3");
    display0.display();
    ButtonA=3;
    delay(500);
}else if(i == 3 && digitalRead(ButtonRed)==0 )
{
    TCA9548A(0);
    display0.clearDisplay();
    display0.setCursor(0,0);
    display0.setTextColor(1);
    display0.setTextSize(1);
    display0.print("Choose The Number\n\nOf Players");
    display0.setCursor(52,36);
    display0.setTextColor(1);
    display0.setTextSize(2);
    display0.print("4");
    display0.display();
    ButtonA=4;
    delay(500);
}
else if(i == 4 && digitalRead(ButtonRed)==0){
    i=0;
}
}
Serial.println("\tWelcome\n");
TCA9548A(0);
  display0.clearDisplay();
  display0.setCursor(35, 26); 
  display0.setTextColor(1,0);
  display0.setTextSize(2);
  display0.print("START");
  display0.display();
 if(ButtonA==0) {
AHp = 5;
BHp = 5;
AGem = 0;
BGem = 0;
ADoor = 0;
BDoor = 0;
Serial.println("\t2 Player");
TCA9548A(1);
SetPlayer1();
  display1.setCursor(15, 13);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println(AHp);
  display1.setCursor(22, 25);
  display1.setTextColor(1);
  display1.setTextSize(1); 
  display1.println(AGem);
  display1.setCursor(67, 25);
  display1.setTextColor(1,0);
  display1.setTextSize(1);
  display1.println(ADoor);
  display1.display();
TCA9548A(2);
SetPlayer2();
  display2.setCursor(15, 13);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println(BHp);
  display2.setCursor(22, 25);
  display2.setTextColor(1);
  display2.setTextSize(1); 
  display2.println(BGem);
  display2.setCursor(67, 25);
  display2.setTextColor(1,0);
  display2.setTextSize(1);
  display2.println(BDoor);
  display2.display();
  TCA9548A(3);
  TheDimenstion3();
  display3.display();
  TCA9548A(4);
  TheDimenstion4();
  display4.display();
}
else if(ButtonA==3) {
AHp = 5;
BHp = 5;
CHp = 5;
AGem = 0;
BGem = 0;
CGem = 0;
ADoor = 0;
BDoor = 0;
CDoor = 0;
Serial.println("\t3 Player");
TCA9548A(1);
SetPlayer1();
  display1.setCursor(15, 13);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println(AHp);
  display1.setCursor(22, 25);
  display1.setTextColor(1);
  display1.setTextSize(1); 
  display1.println(AGem);
  display1.setCursor(67, 25);
  display1.setTextColor(1,0);
  display1.setTextSize(1);
  display1.println(ADoor);
  display1.display();
TCA9548A(2);
SetPlayer2();
  display2.setCursor(15, 13);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println(BHp);
  display2.setCursor(22, 25);
  display2.setTextColor(1);
  display2.setTextSize(1); 
  display2.println(BGem);
  display2.setCursor(67, 25);
  display2.setTextColor(1,0);
  display2.setTextSize(1);
  display2.println(BDoor);
  display2.display();
TCA9548A(3);
SetPlayer3();
  display3.setCursor(15, 13);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println(CHp);
  display3.setCursor(22, 25);
  display3.setTextColor(1);
  display3.setTextSize(1); 
  display3.println(CGem);
  display3.setCursor(67, 25);
  display3.setTextColor(1,0);
  display3.setTextSize(1);
  display3.println(CDoor);
  display3.display();
TCA9548A(4);
TheDimenstion4();
display4.display();
}
else if(ButtonA==4) {
AHp = 5;
BHp = 5;
CHp = 5;
DHp = 5;
AGem = 0;
BGem = 0;
CGem = 0;
DGem = 0;
ADoor = 0;
BDoor = 0;
CDoor = 0;
DDoor = 0;
Serial.println("\t4 Player");
TCA9548A(1);
SetPlayer1();
  display1.setCursor(15, 13);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println(AHp);
  display1.setCursor(22, 25);
  display1.setTextColor(1);
  display1.setTextSize(1); 
  display1.println(AGem);
  display1.setCursor(67, 25);
  display1.setTextColor(1,0);
  display1.setTextSize(1);
  display1.println(ADoor);
  display1.display();
TCA9548A(2);
SetPlayer2();
  display2.setCursor(15, 13);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println(BHp);
  display2.setCursor(22, 25);
  display2.setTextColor(1);
  display2.setTextSize(1); 
  display2.println(BGem);
  display2.setCursor(67, 25);
  display2.setTextColor(1,0);
  display2.setTextSize(1);
  display2.println(BDoor);
  display2.display();
TCA9548A(3);
SetPlayer3();
  display3.setCursor(15, 13);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println(CHp);
  display3.setCursor(22, 25);
  display3.setTextColor(1);
  display3.setTextSize(1); 
  display3.println(CGem);
  display3.setCursor(67, 25);
  display3.setTextColor(1,0);
  display3.setTextSize(1);
  display3.println(CDoor);
display3.display();
TCA9548A(4);
SetPlayer4();
  display4.setCursor(15, 13);
  display4.setTextColor(1);
  display4.setTextSize(1);
  display4.println(DHp);
  display4.setCursor(22, 25);
  display4.setTextColor(1);
  display4.setTextSize(1); 
  display4.println(DGem);
  display4.setCursor(67, 25);
  display4.setTextColor(1,0);
  display4.setTextSize(1);
  display4.println(DDoor);
  display4.display();
}
analogWrite(RGB_R_Player1,255);
analogWrite(RGB_G_Player1,150);
analogWrite(RGB_B_Player1,0);
analogWrite(RGB_R_Player2,150);
analogWrite(RGB_G_Player2,0);
analogWrite(RGB_B_Player2,255);
analogWrite(RGB_R_Player3,0);
analogWrite(RGB_G_Player3,255);
analogWrite(RGB_B_Player3,0);
analogWrite(RGB_R_Player4,245);
analogWrite(RGB_G_Player4,51);
analogWrite(RGB_B_Player4,0);
}
//------------------------------------------------------------------------------------------------------------------------------------------
void loop(){
    do{
        if (AFreze==15||BFreze==15||CFreze==15||DFreze==15) {
        BossA=1;
        BossB=1;
        BossC=1;
        BossD=1;
        digitalWrite(Abosslight,1);
        digitalWrite(Bbosslight,1);
        digitalWrite(Cbosslight,1);
        digitalWrite(Dbosslight,1);
        Serial.println("\tBoss Spawn");
        }
        if(AHp>0) {
        AOperation();
            if(BHp>0) {
            BOperation();
                if(CHp>0){
                COperation();
                    if(DHp>0){
                    DOperation();
                    }
                    else if(DHp<1){
                    }   
                }
                else if (CHp<1) {
                    if(DHp>0){
                    DOperation();
                    
                    }
                    else if(DHp<1){
                    }   
                }
            }
            else if(BHp<1){
                if(CHp>0){
                COperation();
                    if(DHp>0){
                    DOperation();                  
                    }
                    else if(DHp<1){
                    }   
                }
                else if (CHp<1) {
                    if(DHp>0){
                    DOperation();
                    
                    }
                    else if(DHp<1){
                    }   
                }
            }   
        }
        else if(AHp<1){
           if(BHp>0) {
            BOperation();
                if(CHp>0){
                COperation();
                    if(DHp>0){
                    DOperation();                    
                    }
                    else if(DHp<1){
                    }   
                }
                else if (CHp<1) {
                    if(DHp>0){
                    DOperation();
                    
                    }
                    else if(DHp<1){

                    }   
                }
            }
            else if(BHp<1){
                if(CHp>0){
                COperation();
                    if(DHp>0){
                    DOperation();
                    
                    }
                    else if(DHp<1){

                    }   
                }
                else if (CHp<1) {
                    if(DHp>0){
                    DOperation();
                    
                    }
                    else if(DHp<1){

                    }   
                }
            }   
        }
if(ADoor >= 7 && BDoor<7 && CDoor<7 && DDoor<7){
    delay(500);
    TCA9548A(1);
    display1.clearDisplay();
    display1.setCursor(10,11);
    display1.setTextColor(1);
    display1.setTextSize(2);
    display1.print(" WIN ");
    display1.display();
    TCA9548A(2);
    display2.clearDisplay();
    display2.setCursor(0,11);
    display2.setTextColor(1);
    display2.setTextSize(2);
    display2.print(" GAME OVER ");
    display2.display();
    TCA9548A(3);
    display3.clearDisplay();
    display3.setCursor(0,11);
    display3.setTextColor(1);
    display3.setTextSize(2);
    display3.print(" GAME OVER ");
    display3.display();
    TCA9548A(4);
    display4.clearDisplay();
    display4.setCursor(0,11);
    display4.setTextColor(1);
    display4.setTextSize(2);
    display4.print(" GAME OVER ");
    display4.display();
    //End++;
     exit(0);
}
else if(ADoor<7 && BDoor>=7 && CDoor<7 && DDoor<7)
{
    delay(500);
    TCA9548A(2);
    display2.clearDisplay();
    display2.setCursor(10,11);
    display2.setTextColor(1);
    display2.setTextSize(2);
    display2.print(" WIN ");
    display2.display();
    TCA9548A(1);
    display1.clearDisplay();
    display1.setCursor(0,11);
    display1.setTextColor(1);
    display1.setTextSize(2);
    display1.print(" GAME OVER ");
    display1.display();
    TCA9548A(3);
    display3.clearDisplay();
    display3.setCursor(0,11);
    display3.setTextColor(1);
    display3.setTextSize(2);
    display3.print(" GAME OVER ");
    display3.display();
    TCA9548A(4);
    display4.clearDisplay();
    display4.setCursor(0,11);
    display4.setTextColor(1);
    display4.setTextSize(2);
    display4.print(" GAME OVER ");
    display4.display();
    //End++;
     exit(0);
}
else if(ADoor<7 && BDoor<7 && CDoor>=7 && DDoor<7)
{
    delay(500);
    TCA9548A(3);
    display3.clearDisplay();
    display3.setCursor(10,11);
    display3.setTextColor(1);
    display3.setTextSize(2);
    display3.print(" WIN ");
    display3.display();
    TCA9548A(2);
    display2.clearDisplay();
    display2.setCursor(0,11);
    display2.setTextColor(1);
    display2.setTextSize(2);
    display2.print(" GAME OVER ");
    display2.display();
    TCA9548A(1);
    display1.clearDisplay();
    display1.setCursor(0,11);
    display1.setTextColor(1);
    display1.setTextSize(2);
    display1.print(" GAME OVER ");
    display1.display();
    TCA9548A(4);
    display4.clearDisplay();
    display4.setCursor(0,11);
    display4.setTextColor(1);
    display4.setTextSize(2);
    display4.print(" GAME OVER ");
    display4.display();
    //End++;
     exit(0);
}
else if(ADoor<7 && BDoor<7 && CDoor<7 && DDoor>=7)
{
    delay(500);
    TCA9548A(4);
    display4.clearDisplay();
    display4.setCursor(10,11);
    display4.setTextColor(1);
    display4.setTextSize(2);
    display4.print(" WIN ");
    display4.display();
    TCA9548A(2);
    display2.clearDisplay();
    display2.setCursor(0,11);
    display2.setTextColor(1);
    display2.setTextSize(2);
    display2.print(" GAME OVER ");
    display2.display();
    TCA9548A(3);
    display3.clearDisplay();
    display3.setCursor(0,11);
    display3.setTextColor(1);
    display3.setTextSize(2);
    display3.print(" GAME OVER ");
    display3.display();
    TCA9548A(1);
    display1.clearDisplay();
    display1.setCursor(0,11);
    display1.setTextColor(1);
    display1.setTextSize(2);
    display1.print(" GAME OVER ");
    display1.display();
    //End++;
     exit(0);
}if(AHp < 1){
    delay(500);
    TCA9548A(1);
    display1.clearDisplay();
    display1.setCursor(0,11);
    display1.setTextColor(1);
    display1.setTextSize(2);
    display1.print(" GAME OVER ");
    display1.display();
}if(BHp < 1){
    delay(500);
    TCA9548A(2);
    display2.clearDisplay();
    display2.setCursor(0,11);
    display2.setTextColor(1);
    display2.setTextSize(2);
    display2.print(" GAME OVER ");
    display2.display();
}if(CHp < 1){
    delay(500);
    TCA9548A(3);
    display3.clearDisplay();
    display3.setCursor(0,11);
    display3.setTextColor(1);
    display3.setTextSize(2);
    display3.print(" GAME OVER ");
    display3.display(); 
}if(DHp < 1){
    delay(500);
    TCA9548A(4);
    display4.clearDisplay();
    display4.setCursor(0,11);
    display4.setTextColor(1);
    display4.setTextSize(2);
    display4.print(" GAME OVER ");
    display4.display();
}
    }while(End<1);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AOperation()
{
 Xnum=0;
 XHp=0;
 XDoor=0;
 XGem=0;
 XShield=0;
 XFreze=AFreze;
 Xstart=0;
do {
XFreze = XFreze + 1 ;
AFreze=XFreze;
 Serial.println(AFreze);
if (XFreze<1) {
        next++;
Serial.println("\tFreze hold for next round");
}
else if (XFreze>0) {
roll=random(1,7);

while (digitalRead(ButtonYellow)==0) {
//จอบอกให้กดปุ่ม 
Serial.println("\t\tPush Button to play");
delay(500);

}
 Anum+=roll;
 Xnum=Anum;
 XHp=AHp;
 XDoor=ADoor;
 XGem=AGem;
 XShield=AShield;
 Xstart=Astart;
 XFreze=AFreze;


while (Xnum>40) {

if(Xnum>40)
{
    Xnum = Xnum%40;
}
else {

}
}    
Serial.println(Xnum);
        if(Xnum==1||Xnum==11||Xnum==21||Xnum==31)
        {
            //เก็บหิน
            XDoor = XDoor+XGem ;
            XGem  = 0 ;
            Serial.println(" Send Gem to door ");
            delay(500);
        }
        else if(Xnum==2||Xnum==12||Xnum==22||Xnum==32)
        {
            //เสียหิน
            if(XGem>0)
            {
                XGem = XGem - 1 ;
                Serial.println(" Lost one Gem");
                delay(500);
                //next
            }
            else 
            {
                Serial.println("No Gem pass");
                delay(500);
                //next
            }
        }
        else if(Xnum==3||Xnum==9||Xnum==13||Xnum==19||Xnum==23||Xnum==29||Xnum==33||Xnum==39)
        {
            //ได้หิน
            XGem = XGem + 1 ;
            Serial.println(" Get one Gem");
            delay(500);
            //next
        }
        else if(Xnum==4||Xnum==8||Xnum==14||Xnum==18||Xnum==24||Xnum==28||Xnum==34||Xnum==38)
        {
            //สุ่มสกิล
            //กดปุ่ม
            rollS = random(1,7);
            while (digitalRead(ButtonYellow)==0) {
            //จอบอกให้กดปุ่ม
            Serial.println("\t\tPush Button to play");
            delay(500);
            }
            Serial.println(rollS);
            if(rollS == 1  )   //Freeze
            {
                AHoldInTime = 1 ;

                XFreze =  - 1 ;
                AFreze=XFreze;
                Serial.println("\t*Freze*");
                TCA9548A(1);
                display1.clearDisplay();
                display1.setCursor(27,11);
                display1.setTextColor(1);
                display1.setTextSize(2);
                display1.println("Freze");
                //display1.println(AFreze);
                display1.display();
                break;;
                //next
            }
            else if (rollS == 2)     //Toxic
            {
                AToxicZone = 1 ;

                XHp = XHp - 2 ;
                Serial.println("\t*Toxic*");
                //next
            }
            else if (rollS == 3)     // Rewind
            {
                ARewindTime = 1;
                Serial.println("\t*Rewind*"); 
                if(Xnum == 4||Xnum == 14||Xnum == 24||Xnum == 34)   // GetGem
                {
                    XGem = XGem + 1 ;
                    Serial.println("\t*And get Gem*");
                    
  
                    if(Xnum == 4)
                    {
                        Xnum = 3 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 13 ;
                        //next
                    }
                    else if(Xnum == 24)
                    {
                        Xnum = 23 ;
                        //next
                    }
                    else if(Xnum == 34)
                    {
                        Xnum = 33 ;
                        //next
                    }
                }
                else if(Xnum == 8||Xnum == 18)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 8)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 28||Xnum == 38)     // Damage
                {
                    Serial.println("\t*And Damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 28)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 38)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                
            }
            else if (rollS == 4)     // Shield
            {
                XShield = 1 ;
                Serial.println("\t*Get Shield*");
                //next
            }
            else if (rollS == 5)     //Triple
            {
                ADoubleTime = 1 ;

                Serial.println("\t*Triple*");
                if(Xnum == 8||Xnum == 18||Xnum == 28||Xnum == 38)   // Door
                {
                    Serial.println("\t*And go to door*");
                    XDoor = XDoor+XGem ;
                    XGem  = 0 ;
                    if(Xnum == 8)
                    {
                        Xnum = 11 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 21 ;
                        //next
                    }
                    else if(Xnum == 28)
                    {
                        Xnum = 31 ;
                        //next
                    }
                    else if(Xnum == 38)
                    {
                        Xnum = 1 ;
                        //next
                    }
                }
                else if(Xnum == 4||Xnum == 14)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 4)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 24||Xnum == 34)     // Damage
                {
                    Serial.println("\t*And damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 24)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 34)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                //next
            }

            else if (rollS == 6)     //Power shot
            {
                ATimeBolt = 1;
                Serial.println("\t*Power Shot*");
                if(Xnum == 4||Xnum == 8)
                {
                    if(BossA == 1)
                    {
                        BossA = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Abosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 14||Xnum == 18)
                {
                    if(BossB == 1)
                    {
                        BossB = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Bbosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");//next
                    }
                }
                if(Xnum == 24||Xnum == 28)
                {
                    if(BossC == 1)
                    {
                        BossC = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Cbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 34||Xnum == 38)
                {
                    if(BossD == 1)
                    {
                        BossD = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Dbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                       Serial.println("\tClear pass");
                        //next
                    }
                }
            }
        }
        else if(Xnum==5||Xnum==15||Xnum==27||Xnum==37)
        {
            //เสียเลือด 1
            XHp = XHp - 1 ;
            Serial.println("\tDamage -1 Hp");
            //next
        }
        else if(Xnum==6||Xnum==16||Xnum==26||Xnum==36)
        {
            //ขโมย
            if (XnextGem>0)
            {
            XnextGem = XnextGem - 1 ;
            XGem = XGem + 1 ;
            Serial.println("\tSteal Stone from Next player");
            //next 
            }
            else {
            Serial.println("\tPass");
            //next
            }
        }
        else if(Xnum==7||Xnum==17||Xnum==25||Xnum==35)
        {
            //ฮิล
            XHp = XHp + 1 ;
            Serial.println("\tGet 1 Hp");
            //next
        }
        else if(Xnum==10||Xnum==20||Xnum==30||Xnum==40)
        {
            //บอส
            if (Xnum == 10) 
            {
                if(BossA == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 20) 
            {
                if(BossB == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 30) 
            {
                if(BossC == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 40) 
            {
                if(BossD == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
 
        } 
next++;
Anum=Xnum;
 AHp=XHp;
 ADoor=XDoor;
 AGem=XGem;
 AShield=XShield;
 AFreze=XFreze;
 Serial.print("\tYour position = ");
 Serial.print(Anum);
  if(roll == 1){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, OneDice, 128, 64, 1);
      display0.display();
  }else if(roll == 2){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, TwoDice, 128, 64, 1);
      display0.display();
  }else if(roll == 3){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, ThreeDice, 128, 64, 1);
      display0.display();
  }else if(roll == 4){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FourDice, 128, 64, 1);
      display0.display();
  }else if(roll == 5){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FiveDice, 128, 64, 1);
      display0.display();
  }else if(roll == 6){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, SixDice, 128, 64, 1);
      display0.display();
  }
  TCA9548A(1);
  display1.clearDisplay();
  display1.setCursor(0, 1);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println("P1");
  //
  display1.setCursor(0, 13);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println("HP");
  display1.setCursor(15, 13);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println(AHp);
  //
  display1.setCursor(0, 25);
  display1.setTextColor(1);
  display1.setTextSize(1); 
  display1.println("GEM");
  display1.setCursor(22, 25);
  display1.setTextColor(1);
  display1.setTextSize(1); 
  display1.println(AGem);
  //
  display1.setCursor(34, 0);
  display1.setTextColor(2);
  display1.setTextSize(3);
  display1.println("(  )");
  display1.setCursor(53, 0);
display1.setTextColor(1);
  display1.setTextSize(3);
  display1.println(Anum);
  //
  display1.setCursor(52, 25);
  display1.setTextColor(1,0);
  display1.setTextSize(1);
  display1.println("[   ]");
  display1.setCursor(67, 25);
  display1.setTextColor(1,0);
  display1.setTextSize(1);
  display1.println(ADoor);
  //
  if (AShield == 1) {
  Status_Shield1();
  }
  if(AHoldInTime == 1 && rollS == 1 && (Anum == 4 || Anum == 8 || Anum == 14 || Anum == 18 || Anum == 24 || Anum == 28 || Anum ==34 || Anum == 38)){
                    display1.drawBitmap(0, 0, OledHoldInTime, 128, 32, 1);
    }else if(AToxicZone == 1 && rollS == 2 && (Anum == 4 || Anum == 8 || Anum == 14 || Anum == 18 || Anum == 24 || Anum == 28 || Anum ==34 || Anum == 38)){
                    display1.drawBitmap(0, 0, OledToxicZone, 128, 32, 1);
    }else if(ARewindTime == 1 && rollS == 3 && (Anum == 4  || Anum == 8 || Anum == 14 || Anum == 18 || Anum == 24 || Anum == 28 || Anum ==34 || Anum == 38 || Anum == 3 || Anum == 7 || Anum == 13 || Anum == 17 || Anum == 23 || Anum == 27 || Anum == 33 || Anum == 37)){
                    display1.drawBitmap(0, 0, OledRewindTime, 128, 32, 1);
    }else if(rollS == 4 && (Anum == 4 || Anum == 8 || Anum == 14 || Anum == 18 || Anum == 24 || Anum == 28 || Anum ==34 || Anum == 38)){
                    display1.drawBitmap(0, 0, OledProtectYourTime, 128, 32, 1);
    }else if(ADoubleTime == 1 && rollS == 5 && (Anum == 4 || Anum ==7 || Anum == 8 || Anum == 11 || Anum == 14 || Anum == 17 || Anum == 18 || Anum == 21 || Anum == 24 || Anum == 27 || Anum == 28 || Anum == 31 || Anum ==34 || Anum == 37 || Anum == 38 || Anum == 1)){
                    display1.drawBitmap(0, 0, OledDoubleTime, 128, 32, 1);
    }else if(ATimeBolt == 1 && rollS == 6 && (Anum == 4 || Anum == 8 || Anum == 14 || Anum == 18 || Anum == 24 || Anum == 28 || Anum ==34 || Anum == 38)){
                    display1.drawBitmap(0, 0, OledTimeBolt, 128, 32, 1);
    }else{}
  display1.display();
  delay(500);
    rollS=0;
  AHoldInTime = 0;
  AToxicZone = 0;
  ARewindTime = 0;
  ADoubleTime = 0;
  ATimeBolt = 0;

 }   //Check Freze
 
 
 }while (next < 1);
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//B




void BOperation(){
 Xnum=0;
 XHp=0;
 XDoor=0;
 XGem=0;
 XShield=0;
 XFreze=BFreze;
 Xstart=0;
 
do {
XFreze = XFreze + 1 ;
BFreze=XFreze;
 Serial.println(BFreze);
if (XFreze<1) {
      next++;
Serial.println("\tFreze hold for next round");
}

else if (XFreze>0) {
roll=random(1,7);

while (digitalRead(ButtonBlue)==0) {
//จอบอกให้กดปุ่ม 
Serial.println("\t\tPush Button to play");
delay(500);
}
Bnum+=roll;
 Xnum=Bnum;
 XHp=BHp;
 XDoor=BDoor;
 XGem=BGem;
 XShield=BShield;
 Xstart=Bstart;
  XFreze=BFreze;

while (Xnum>40) {

if(Xnum>40)
{
    Xnum = Xnum%40;
}
else {

}
}    
Serial.println(Xnum);
        if(Xnum==1||Xnum==11||Xnum==21||Xnum==31)
        {
            //เก็บหิน
            XDoor = XDoor+XGem ;
            XGem  = 0 ;
            Serial.println(" Send Gem to door ");
        }
        else if(Xnum==2||Xnum==12||Xnum==22||Xnum==32)
        {
            //เสียหิน
            if(XGem>0)
            {
                XGem = XGem - 1 ;
                Serial.println(" Lost one Gem");
                //next
            }
            else 
            {
                Serial.println("No Gem pass");
                //next
            }
        }
        else if(Xnum==3||Xnum==9||Xnum==13||Xnum==19||Xnum==23||Xnum==29||Xnum==33||Xnum==39)
        {
            //ได้หิน
            XGem = XGem + 1 ;
            Serial.println(" Get one Gem");
            //next
        }
        else if(Xnum==4||Xnum==8||Xnum==14||Xnum==18||Xnum==24||Xnum==28||Xnum==34||Xnum==38)
        {
            //สุ่มสกิล
            //กดปุ่ม
            rollS = random(1,7);
            while (digitalRead(ButtonBlue)==0) {
            //จอบอกให้กดปุ่ม
            Serial.println("\t\tPush Button to play");
            delay(500);
            }
            Serial.println(rollS);
            if(rollS == 1)   //Freeze
            {   
                BHoldInTime = 1;

                XFreze = - 1 ;
                BFreze=XFreze;
                Serial.println("\t*Freze*");
                TCA9548A(2);
                display2.clearDisplay();
                display2.setCursor(27,11);
                display2.setTextColor(1);
                display2.setTextSize(2);
                display2.println("Freze");
                //display2.println(BFreze);
                display2.display();
                break;
                //next
            }
            else if (rollS == 2)     //Toxic
            {   
                BToxicZone = 1;

                XHp = XHp - 2 ;
                Serial.println("\t*Toxic*");
                //next
            }
            else if (rollS == 3)     // Rewind
            {   
                BRewindTime = 1 ;

                Serial.println("\t*Rewind*");
                if(Xnum == 4||Xnum == 14||Xnum == 24||Xnum == 34)   // GetGem
                {
                    XGem = XGem + 1 ;
                    Serial.println("\t*And get Gem*");
                    if(Xnum == 4)
                    {
                        Xnum = 3 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 13 ;
                        //next
                    }
                    else if(Xnum == 24)
                    {
                        Xnum = 23 ;
                        //next
                    }
                    else if(Xnum == 34)
                    {
                        Xnum = 33 ;
                        //next
                    }
                }
                else if(Xnum == 8||Xnum == 18)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 8)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 28||Xnum == 38)     // Damage
                {
                    Serial.println("\t*And Damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 28)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 38)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                
            }
            else if (rollS == 4)     // Shield
            {
                XShield = 1 ;
                Serial.println("\t*Get Shield*");
                TCA9548A(2);
                Status_Shield2();
                display2.display();
                //next
            }
            else if (rollS == 5)     //Triple
            {   
                BDoubleTime = 1;

                Serial.println("\t*Triple*");
                if(Xnum == 8||Xnum == 18||Xnum == 28||Xnum == 38)   // Door
                {
                    Serial.println("\t*And go to door*");
                    XDoor = XDoor+XGem ;
                    XGem  = 0 ;
                    if(Xnum == 8)
                    {
                        Xnum = 11 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 21 ;
                        //next
                    }
                    else if(Xnum == 28)
                    {
                        Xnum = 31 ;
                        //next
                    }
                    else if(Xnum == 38)
                    {
                        Xnum = 1 ;
                        //next
                    }
                }
                else if(Xnum == 4||Xnum == 14)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 4)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 24||Xnum == 34)     // Damage
                {
                    Serial.println("\t*And damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 24)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 34)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                //next
            }

            else if (rollS == 6)     //Power shot
            {   
                BTimeBolt = 1 ;

                Serial.println("\t*Power Shot*");
                if(Xnum == 4||Xnum == 8)
                {
                    if(BossA == 1)
                    {
                        BossA = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Abosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 14||Xnum == 18)
                {
                    if(BossB == 1)
                    {
                        BossB = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Bbosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");//next
                    }
                }
                if(Xnum == 24||Xnum == 28)
                {
                    if(BossC == 1)
                    {
                        BossC = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Cbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 34||Xnum == 38)
                {
                    if(BossD == 1)
                    {
                        BossD = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Dbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                       Serial.println("\tClear pass");
                        //next
                    }
                }
            }
        }
        else if(Xnum==5||Xnum==15||Xnum==27||Xnum==37)
        {
            //เสียเลือด 1
            XHp = XHp - 1 ;
            Serial.println("\tDamage -1 Hp");
            //next
        }
        else if(Xnum==6||Xnum==16||Xnum==26||Xnum==36)
        {
            //ขโมย
            if (XnextGem>0)
            {
            XnextGem = XnextGem - 1 ;
            XGem = XGem + 1 ;
            Serial.println("\tSteal Stone from Next player");
            //next 
            }
            else {
            Serial.println("\tPass");
            //next
            }
        }
        else if(Xnum==7||Xnum==17||Xnum==25||Xnum==35)
        {
            //ฮิล
            XHp = XHp + 1 ;
            Serial.println("\tGet 1 Hp");
            //next
        }
        else if(Xnum==10||Xnum==20||Xnum==30||Xnum==40)
        {
            //บอส
            if (Xnum == 10) 
            {
                if(BossA == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 20) 
            {
                if(BossB == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 30) 
            {
                if(BossC == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 40) 
            {
                if(BossD == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
 
        } 
next++;
Bnum=Xnum;
 BHp=XHp;
 BDoor=XDoor;
 BGem=XGem;
 BShield=XShield;
 BFreze=XFreze;
 Serial.print("\tYour position = ");
 Serial.print(Bnum);
   if(roll == 1){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, OneDice, 128, 64, 1);
      display0.display();
  }else if(roll == 2){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, TwoDice, 128, 64, 1);
      display0.display();
  }else if(roll == 3){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, ThreeDice, 128, 64, 1);
      display0.display();
  }else if(roll == 4){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FourDice, 128, 64, 1);
      display0.display();
  }else if(roll == 5){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FiveDice, 128, 64, 1);
      display0.display();
  }else if(roll == 6){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, SixDice, 128, 64, 1);
      display0.display();
  }
  TCA9548A(2);
  display2.clearDisplay();
  display2.setCursor(0, 1);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println("P2");
  //
  display2.setCursor(0, 13);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println("HP");
  display2.setCursor(15, 13);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println(BHp);
  //
  display2.setCursor(0, 25);
  display2.setTextColor(1);
  display2.setTextSize(1); 
  display2.println("GEM");
  display2.setCursor(22, 25);
  display2.setTextColor(1);
  display2.setTextSize(1); 
  display2.println(BGem);
  //
  display2.setCursor(34, 0);
  display2.setTextColor(2);
  display2.setTextSize(3);
  display2.println("(  )");
  display2.setCursor(53, 0);
  display2.setTextColor(1);
  display2.setTextSize(3);
  display2.println(Bnum);
  //
  display2.setCursor(54, 25);
  display2.setTextColor(1,0);
  display2.setTextSize(1);
  display2.println("[   ]");
  display2.setCursor(67, 25);
  display2.setTextColor(1,0);
  display2.setTextSize(1);
  display2.println(BDoor);
  //
  if (BShield == 1) {
  Status_Shield2();
  }
  if(BHoldInTime ==  1 && rollS == 1 && (Bnum == 4 || Bnum == 8 || Bnum == 14 || Bnum == 18 || Bnum == 24 || Bnum == 28 || Bnum ==34 || Bnum == 38)){
                display2.drawBitmap(0, 0, OledHoldInTime, 128, 32, 1);
    }else if(BToxicZone == 1 && rollS == 2 && (Bnum == 4 || Bnum == 8 || Bnum == 14 || Bnum == 18 || Bnum == 24 || Bnum == 28 || Bnum ==34 || Bnum == 38)){
                display2.drawBitmap(0, 0, OledToxicZone, 128, 32, 1);
    }else if(BRewindTime== 1 && rollS == 3 && (Bnum == 4 || Bnum == 8 || Bnum == 14 || Bnum == 18 || Bnum == 24 || Bnum == 28 || Bnum ==34 || Bnum == 38 || Bnum == 3 || Bnum == 7 || Bnum == 13 || Bnum == 17 || Bnum == 23 || Bnum == 27 || Bnum == 33 || Bnum == 37)){
                display2.drawBitmap(0, 0, OledRewindTime, 128, 32, 1);
    }else if(rollS == 4 && (Bnum == 4 || Bnum == 8 || Bnum == 14 || Bnum == 18 || Bnum == 24 || Bnum == 28 || Bnum ==34 || Bnum == 38)){
                display2.drawBitmap(0, 0, OledProtectYourTime, 128, 32, 1);
    }else if(BDoubleTime == 1 && rollS == 5 && (Bnum == 4 || Bnum ==7 || Bnum == 8 || Bnum == 11 || Bnum == 14 || Bnum == 17 || Bnum == 18 || Bnum == 21 || Bnum == 24 || Bnum == 27 || Bnum == 28 || Bnum == 31 || Bnum ==34 || Bnum == 37 || Bnum == 38 || Bnum == 1)){
                display2.drawBitmap(0, 0, OledDoubleTime, 128, 32, 1);
    }else if(BTimeBolt == 1 && rollS == 6 && (Bnum == 4 || Bnum == 8 || Bnum == 14 || Bnum == 18 || Bnum == 24 || Bnum == 28 || Bnum ==34 || Bnum == 38)){
                display2.drawBitmap(0, 0, OledTimeBolt, 128, 32, 1);
    }
  display2.display();
  delay(500);
    rollS=0;
    BHoldInTime = 0;
    BToxicZone = 0;
    BRewindTime = 0;
    BDoubleTime = 0;
    BTimeBolt = 0;

    }   //Check Freze
    
    
 }while (next < 1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void COperation(){
Xnum=0;
 XHp=0;
 XDoor=0;
 XGem=0;
 XShield=0;
 XFreze=CFreze;
 Xstart=0;
 
do {
XFreze = XFreze + 1 ;
CFreze=XFreze;
 Serial.println(CFreze);
if (XFreze<1) {
      next++;
Serial.println("\tFreze hold for next round");
}

else if (XFreze>0) {
roll=random(1,7);

while (digitalRead(ButtonGreen)==0) {
//จอบอกให้กดปุ่ม 
Serial.println("\t\tPush Button to play");
delay(500);
}
Cnum+=roll;
 Xnum=Cnum;
 XHp=CHp;
 XDoor=CDoor;
 XGem=CGem;
 XShield=CShield;
 Xstart=Cstart;
  XFreze=CFreze;

while (Xnum>40) {

if(Xnum>40)
{
    Xnum = Xnum%40;
}
else {

}
}    
Serial.println(Xnum);
        if(Xnum==1||Xnum==11||Xnum==21||Xnum==31)
        {
            //เก็บหิน
            XDoor = XDoor+XGem ;
            XGem  = 0 ;
            Serial.println(" Send Gem to door ");
        }
        else if(Xnum==2||Xnum==12||Xnum==22||Xnum==32)
        {
            //เสียหิน
            if(XGem>0)
            {
                XGem = XGem - 1 ;
                Serial.println(" Lost one Gem");
                //next
            }
            else 
            {
                Serial.println("No Gem pass");
                //next
            }
        }
        else if(Xnum==3||Xnum==9||Xnum==13||Xnum==19||Xnum==23||Xnum==29||Xnum==33||Xnum==39)
        {
            //ได้หิน
            XGem = XGem + 1 ;
            Serial.println(" Get one Gem");
            //next
        }
        else if(Xnum==4||Xnum==8||Xnum==14||Xnum==18||Xnum==24||Xnum==28||Xnum==34||Xnum==38)
        {
            //สุ่มสกิล
            //กดปุ่ม
            rollS = random(1,7);
            while (digitalRead(ButtonGreen)==0) {
            //จอบอกให้กดปุ่ม
            Serial.println("\t\tPush Button to play");
            delay(500);
            }
            Serial.println(rollS);
            if(rollS == 1)   //Freeze
            {   
                CHoldInTime = 1 ;

                XFreze = - 1 ;
                CFreze=XFreze;
                Serial.println("\t*Freze*");
                TCA9548A(3);
                display3.clearDisplay();
                display3.setCursor(27,11);
                display3.setTextColor(1);
                display3.setTextSize(2);
                display3.println("Freze");
                //display3.println(CFreze);
                display3.display();
                break;;
                //next
            }
            else if (rollS == 2)     //Toxic
            {   
                CToxicZone = 1 ;

                XHp = XHp - 2 ;
                Serial.println("\t*Toxic*");
                //next
            }
            else if (rollS == 3)     // Rewind
            {   
                CRewindTime = 1 ;

                Serial.println("\t*Rewind*");
                if(Xnum == 4||Xnum == 14||Xnum == 24||Xnum == 34)   // GetGem
                {
                    XGem = XGem + 1 ;
                    Serial.println("\t*And get Gem*");
                    if(Xnum == 4)
                    {
                        Xnum = 3 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 13 ;
                        //next
                    }
                    else if(Xnum == 24)
                    {
                        Xnum = 23 ;
                        //next
                    }
                    else if(Xnum == 34)
                    {
                        Xnum = 33 ;
                        //next
                    }
                }
                else if(Xnum == 8||Xnum == 18)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 8)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 28||Xnum == 38)     // Damage
                {
                    Serial.println("\t*And Damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 28)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 38)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                
            }
            else if (rollS == 4)     // Shield
            {
                XShield = 1 ;
                Serial.println("\t*Get Shield*");
                TCA9548A(3);
                Status_Shield3();
                display3.display();
                //next
            }
            else if (rollS == 5)     //Triple
            {   
                CDoubleTime = 1 ;

                Serial.println("\t*Triple*");
                if(Xnum == 8||Xnum == 18||Xnum == 28||Xnum == 38)   // Door
                {
                    Serial.println("\t*And go to door*");
                    XDoor = XDoor+XGem ;
                    XGem  = 0 ;
                    if(Xnum == 8)
                    {
                        Xnum = 11 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 21 ;
                        //next
                    }
                    else if(Xnum == 28)
                    {
                        Xnum = 31 ;
                        //next
                    }
                    else if(Xnum == 38)
                    {
                        Xnum = 1 ;
                        //next
                    }
                }
                else if(Xnum == 4||Xnum == 14)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 4)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 24||Xnum == 34)     // Damage
                {
                    Serial.println("\t*And damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 24)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 34)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                //next
            }

            else if (rollS == 6)     //Power shot
            {   
                CTimeBolt = 1 ;

                Serial.println("\t*Power Shot*");
                if(Xnum == 4||Xnum == 8)
                {
                    if(BossA == 1)
                    {
                        BossA = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Abosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 14||Xnum == 18)
                {
                    if(BossB == 1)
                    {
                        BossB = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Bbosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");//next
                    }
                }
                if(Xnum == 24||Xnum == 28)
                {
                    if(BossC == 1)
                    {
                        BossC = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Cbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 34||Xnum == 38)
                {
                    if(BossD == 1)
                    {
                        BossD = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Dbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                       Serial.println("\tClear pass");
                        //next
                    }
                }
            }
        }
        else if(Xnum==5||Xnum==15||Xnum==27||Xnum==37)
        {
            //เสียเลือด 1
            XHp = XHp - 1 ;
            Serial.println("\tDamage -1 Hp");
            //next
        }
        else if(Xnum==6||Xnum==16||Xnum==26||Xnum==36)
        {
            //ขโมย
            if (XnextGem>0)
            {
            XnextGem = XnextGem - 1 ;
            XGem = XGem + 1 ;
            Serial.println("\tSteal Stone from Next player");
            //next 
            }
            else {
            Serial.println("\tPass");
            //next
            }
        }
        else if(Xnum==7||Xnum==17||Xnum==25||Xnum==35)
        {
            //ฮิล
            XHp = XHp + 1 ;
            Serial.println("\tGet 1 Hp");
            //next
        }
        else if(Xnum==10||Xnum==20||Xnum==30||Xnum==40)
        {
            //บอส
            if (Xnum == 10) 
            {
                if(BossA == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 20) 
            {
                if(BossB == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 30) 
            {
                if(BossC == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 40) 
            {
                if(BossD == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
 
        } 
next++;
Cnum=Xnum;
 CHp=XHp;
 CDoor=XDoor;
 CGem=XGem;
 CShield=XShield;
 CFreze=XFreze;
 Serial.print("\tYour position = ");
 Serial.print(Cnum);
    if(roll == 1){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, OneDice, 128, 64, 1);
      display0.display();
  }else if(roll == 2){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, TwoDice, 128, 64, 1);
      display0.display();
  }else if(roll == 3){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, ThreeDice, 128, 64, 1);
      display0.display();
  }else if(roll == 4){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FourDice, 128, 64, 1);
      display0.display();
  }else if(roll == 5){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FiveDice, 128, 64, 1);
      display0.display();
  }else if(roll == 6){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, SixDice, 128, 64, 1);
      display0.display();
  }
  TCA9548A(3);
  display3.clearDisplay();
  display3.setCursor(0, 1);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println("P3");
  //
  display3.setCursor(0, 13);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println("HP");
  display3.setCursor(15, 13);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println(CHp);
  //
  display3.setCursor(0, 25);
  display3.setTextColor(1);
  display3.setTextSize(1); 
  display3.println("GEM");
  display3.setCursor(22, 25);
  display3.setTextColor(1);
  display3.setTextSize(1); 
  display3.println(CGem);
  //
  display3.setCursor(34, 0);
  display3.setTextColor(2);
  display3.setTextSize(3);
  display3.println("(  )");
  display3.setCursor(53, 0);
  display3.setTextColor(1);
  display3.setTextSize(3);
  display3.println(Cnum);
  //
  display3.setCursor(54, 25);
  display3.setTextColor(1,0);
  display3.setTextSize(1);
  display3.println("[   ]");
  display3.setCursor(67, 25);
  display3.setTextColor(1,0);
  display3.setTextSize(1);
  display3.println(CDoor);
  //
  if (CShield == 1) {
  Status_Shield3();
  }
    if(CHoldInTime == 1 && rollS == 1 && (Cnum == 4 || Cnum == 8 || Cnum == 14 || Cnum == 18 || Cnum == 24 || Cnum == 28 || Cnum ==34 || Cnum == 38)){
    display3.drawBitmap(0, 0, OledHoldInTime, 128, 32, 1);
    }else if(CToxicZone == 1 && rollS == 2 && (Cnum == 4 || Cnum == 8 || Cnum == 14 || Cnum == 18 || Cnum == 24 || Cnum == 28 || Cnum ==34 || Cnum == 38)){
    display3.drawBitmap(0, 0, OledToxicZone, 128, 32, 1);
    }else if(CRewindTime == 1 && rollS == 3 && (Cnum == 4 || Cnum == 8 || Cnum == 14 || Cnum == 18 || Cnum == 24 || Cnum == 28 || Cnum ==34 || Cnum == 38 || Cnum == 3 || Cnum == 7 || Cnum == 13 || Cnum == 17 || Cnum == 23 || Cnum == 27 || Cnum == 33 || Cnum == 37)){
    display3.drawBitmap(0, 0, OledRewindTime, 128, 32, 1);
    }else if(rollS == 4 && (Cnum == 4 || Cnum == 8 || Cnum == 14 || Cnum == 18 || Cnum == 24 || Cnum == 28 || Cnum ==34 || Cnum == 38)){
    display3.drawBitmap(0, 0, OledProtectYourTime, 128, 32, 1);
    }else if(CDoubleTime == 1 && rollS == 5 && (Cnum == 4 || Cnum ==7 || Cnum == 8 || Cnum == 11 || Cnum == 14 || Cnum == 17 || Cnum == 18 || Cnum == 21 || Cnum == 24 || Cnum == 27 || Cnum == 28 || Cnum == 31 || Cnum ==34 || Cnum == 37 || Cnum == 38 || Cnum == 1)){
    display3.drawBitmap(0, 0, OledDoubleTime, 128, 32, 1);
    }else if(CTimeBolt == 1 && rollS == 6 && (Cnum == 4 || Cnum == 8 || Cnum == 14 || Cnum == 18 || Cnum == 24 || Cnum == 28 || Cnum ==34 || Cnum == 38)){
    display3.drawBitmap(0, 0, OledTimeBolt, 128, 32, 1);
    }
  display3.display();
  delay(500);
    rollS=0;
    CHoldInTime = 0;
    CToxicZone = 0;
    CRewindTime = 0;
    CDoubleTime = 0;
    CTimeBolt = 0;

    }   //Check Freze
    
 }while (next < 1);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void DOperation(){
 Xnum=0;
 XHp=0;
 XDoor=0;
 XGem=0;
 XShield=0;
 XFreze=DFreze;
 Xstart=0;
 
do {
XFreze = DFreze + 1 ;
DFreze=XFreze;
 Serial.println(DFreze);
if (XFreze<1) {
    next++;
Serial.println("\tFreze hold for next round");
}

else if (XFreze>0) {
roll=random(1,7);

while (digitalRead(ButtonRed)==0) {
//จอบอกให้กดปุ่ม 
Serial.println("\t\tPush Button to play");
delay(500);
}
Dnum+=roll;
 Xnum=Dnum;
 XHp=DHp;
 XDoor=DDoor;
 XGem=DGem;
 XShield=DShield;
 Xstart=Dstart;
 XFreze=DFreze;

while (Xnum>40) {

if(Xnum>40)
{
    Xnum = Xnum%40;
}
else {

}
}    
Serial.println(Xnum);
        if(Xnum==1||Xnum==11||Xnum==21||Xnum==31)
        {
            //เก็บหิน
            XDoor = XDoor+XGem ;
            XGem  = 0 ;
            Serial.println(" Send Gem to door ");

        }
        else if(Xnum==2||Xnum==12||Xnum==22||Xnum==32)
        {
            //เสียหิน
            if(XGem>0)
            {
                XGem = XGem - 1 ;
                Serial.println(" Lost one Gem");
                //next
            }
            else 
            {
                Serial.println("No Gem pass");
                //next
            }
        }
        else if(Xnum==3||Xnum==9||Xnum==13||Xnum==19||Xnum==23||Xnum==29||Xnum==33||Xnum==39)
        {
            //ได้หิน
            XGem = XGem + 1 ;
            Serial.println(" Get one Gem");
            //next
        }
        else if(Xnum==4||Xnum==8||Xnum==14||Xnum==18||Xnum==24||Xnum==28||Xnum==34||Xnum==38)
        {
            //สุ่มสกิล
            //กดปุ่ม
            rollS = random(1,7);
            while (digitalRead(ButtonRed)==0) {
            //จอบอกให้กดปุ่ม
            Serial.println("\t\tPush Button to play");
            delay(500);
            }
            Serial.println(rollS);
            if(rollS == 1)   //Freeze
            {
                DHoldInTime = 1 ;

                XFreze = - 1 ;
                DFreze=XFreze;
                Serial.println("\t*Freze*");
                TCA9548A(4);
                display4.clearDisplay();
                display4.setCursor(27,11);
                display4.setTextColor(1);
                display4.setTextSize(2);
                display4.println("Freze");
                //display4.println(DFreze);
                display4.display();
                
               break;;
                //next
            }
            else if (rollS == 2)     //Toxic
            {   
                DToxicZone = 1 ;

                XHp = XHp - 2 ;
                Serial.println("\t*Toxic*");
                //next
            }
            else if (rollS == 3)     // Rewind
            {   
                DRewindTime = 1 ;

                Serial.println("\t*Rewind*");
                if(Xnum == 4||Xnum == 14||Xnum == 24||Xnum == 34)   // GetGem
                {
                    XGem = XGem + 1 ;
                    Serial.println("\t*And get Gem*");
                    if(Xnum == 4)
                    {
                        Xnum = 3 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 13 ;
                        //next
                    }
                    else if(Xnum == 24)
                    {
                        Xnum = 23 ;
                        //next
                    }
                    else if(Xnum == 34)
                    {
                        Xnum = 33 ;
                        //next
                    }
                }
                else if(Xnum == 8||Xnum == 18)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 8)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 28||Xnum == 38)     // Damage
                {
                    Serial.println("\t*And Damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 28)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 38)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                
            }
            else if (rollS == 4)     // Shield
            {
                XShield = 1 ;
                Serial.println("\t*Get Shield*");
                TCA9548A(4);
                Status_Shield4();
                display4.display();
                //next
            }
            else if (rollS == 5)     //Triple
            {   
                DDoubleTime = 1 ;
                Serial.println("\t*Triple*");
                if(Xnum == 8||Xnum == 18||Xnum == 28||Xnum == 38)   // Door
                {
                    Serial.println("\t*And go to door*");
                    XDoor = XDoor+XGem ;
                    XGem  = 0 ;
                    if(Xnum == 8)
                    {
                        Xnum = 11 ;
                        //next
                    }
                    else if(Xnum == 18)
                    {
                        Xnum = 21 ;
                        //next
                    }
                    else if(Xnum == 28)
                    {
                        Xnum = 31 ;
                        //next
                    }
                    else if(Xnum == 38)
                    {
                        Xnum = 1 ;
                        //next
                    }
                }
                else if(Xnum == 4||Xnum == 14)      // Heal
                {
                    Serial.println("\t*And Heal*");
                    XHp = XHp + 1 ;
                    if(Xnum == 4)
                    {
                        Xnum = 7 ;
                        //next
                    }
                    else if(Xnum == 14)
                    {
                        Xnum = 17 ;
                        //next
                    }
                }
                else if(Xnum == 24||Xnum == 34)     // Damage
                {
                    Serial.println("\t*And damage*");
                    XHp = XHp - 1 ;
                    if(Xnum == 24)
                    {
                        Xnum = 27 ;
                        //next
                    }
                else if(Xnum == 34)
                    {
                        Xnum = 37 ;
                        //next
                    }
                }
                //next
            }

            else if (rollS == 6)     //Power shot
            {
                DTimeBolt = 1 ;

                Serial.println("\t*Power Shot*");
                if(Xnum == 4||Xnum == 8)
                {
                    if(BossA == 1)
                    {
                        BossA = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Abosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 14||Xnum == 18)
                {
                    if(BossB == 1)
                    {
                        BossB = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Bbosslight,0);
                        Serial.println("\t*Boss Die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");//next
                    }
                }
                if(Xnum == 24||Xnum == 28)
                {
                    if(BossC == 1)
                    {
                        BossC = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Cbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                        Serial.println("\tClear pass");
                        //next
                    }
                }
                if(Xnum == 34||Xnum == 38)
                {
                    if(BossD == 1)
                    {
                        BossD = 0 ;
                        XGem = XGem + 1 ;
                        Xnum = Xstart ;
                        XDoor = XDoor + XGem ;
                        XGem = 0 ;
                        digitalWrite(Dbosslight,0);
                        Serial.println("\t*Boss die*");
                        //next
                    }
                    else
                    {
                       Serial.println("\tClear pass");
                        //next
                    }
                }
            }
        }
        else if(Xnum==5||Xnum==15||Xnum==27||Xnum==37)
        {
            //เสียเลือด 1
            XHp = XHp - 1 ;
            Serial.println("\tDamage -1 Hp");
            //next
        }
        else if(Xnum==6||Xnum==16||Xnum==26||Xnum==36)
        {
            //ขโมย
            if (XnextGem>0)
            {
            XnextGem = XnextGem - 1 ;
            XGem = XGem + 1 ;
            Serial.println("\tSteal Stone from Next player");
            //next 
            }
            else {
            Serial.println("\tPass");
            //next
            }
        }
        else if(Xnum==7||Xnum==17||Xnum==25||Xnum==35)
        {
            //ฮิล
            XHp = XHp + 1 ;
            Serial.println("\tGet 1 Hp");
            //next
        }
        else if(Xnum==10||Xnum==20||Xnum==30||Xnum==40)
        {
            //บอส
            if (Xnum == 10) 
            {
                if(BossA == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 20) 
            {
                if(BossB == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 30) 
            {
                if(BossC == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
            else if (Xnum == 40) 
            {
                if(BossD == 1)
                {
                    if(XShield == 1)
                    {
                        XShield = 0 ;
                        Serial.println("\t*Block from boss*");
                        //next
                    }
                    else
                    {
                        XHp = XHp - 3 ;
                        Serial.println("\tBoss hit u 3 hp");
                        //next
                    }
                }
            }
 
        } 
next++;
Dnum=Xnum;
 DHp=XHp;
 DDoor=XDoor;
 DGem=XGem;
 DShield=XShield;
 DFreze=XFreze;
 Serial.print("\tYour position = ");
 Serial.print(Dnum);
    if(roll == 1){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, OneDice, 128, 64, 1);
      display0.display();
  }else if(roll == 2){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, TwoDice, 128, 64, 1);
      display0.display();
  }else if(roll == 3){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, ThreeDice, 128, 64, 1);
      display0.display();
  }else if(roll == 4){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FourDice, 128, 64, 1);
      display0.display();
  }else if(roll == 5){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, FiveDice, 128, 64, 1);
      display0.display();
  }else if(roll == 6){
      TCA9548A(0);
      display0.clearDisplay();
      delay(100);
      display0.drawBitmap(0, 0, SixDice, 128, 64, 1);
      display0.display();
  }
 TCA9548A(4);
  display4.clearDisplay();
  display4.setCursor(0, 1);
  display4.setTextColor(1);
  display4.setTextSize(1);
  display4.println("P4");
  //
  display4.setCursor(0, 13);
  display4.setTextColor(1);
  display4.setTextSize(1);
  display4.println("HP");
  display4.setCursor(15, 13);
  display4.setTextColor(1);
  display4.setTextSize(1);
  display4.println(DHp);
  //
  display4.setCursor(0, 25);
  display4.setTextColor(1);
  display4.setTextSize(1); 
  display4.println("GEM");
  display4.setCursor(22, 25);
  display4.setTextColor(1);
  display4.setTextSize(1); 
  display4.println(DGem);
  //
  display4.setCursor(34, 0);
  display4.setTextColor(2);
  display4.setTextSize(3);
  display4.println("(  )");
  display4.setCursor(53, 0);
  display4.setTextColor(1);
  display4.setTextSize(3);
  display4.println(Dnum);
  //
  display4.setCursor(54, 25);
  display4.setTextColor(1,0);
  display4.setTextSize(1);
  display4.println("[   ]");
  display4.setCursor(67, 25);
  display4.setTextColor(1,0);
  display4.setTextSize(1);
  display4.println(DDoor);
  //
  if (DShield == 1) {
  Status_Shield4();
  }else  {
  }
  if(DHoldInTime == 1 && rollS == 1 && (Dnum == 4 || Dnum == 8 || Dnum == 14 || Dnum == 18 || Dnum == 24 || Dnum == 28 || Dnum ==34 || Dnum == 38)){
                display4.drawBitmap(0, 0, OledHoldInTime, 128, 32, 1);
    }else if(DToxicZone == 1 && rollS == 2 && (Dnum == 4 || Dnum == 8 || Dnum == 14 || Dnum == 18 || Dnum == 24 || Dnum == 28 || Dnum ==34 || Dnum == 38)){
                display4.drawBitmap(0, 0, OledToxicZone, 128, 32, 1);
    }else if(DRewindTime == 1 && rollS == 3 && (Dnum == 4 || Dnum == 8 || Dnum == 14 || Dnum == 18 || Dnum == 24 || Dnum == 28 || Dnum ==34 || Dnum == 38 || Dnum == 3 || Dnum == 7 || Dnum == 13 || Dnum == 17 || Dnum == 23 || Dnum == 27 || Dnum ==33 || Dnum == 37)){
                display4.drawBitmap(0, 0, OledRewindTime, 128, 32, 1);
    }else if(rollS == 4 && (Dnum == 4 || Dnum == 8 || Dnum == 14 || Dnum == 18 || Dnum == 24 || Dnum == 28 || Dnum ==34 || Dnum == 38)){
                display4.drawBitmap(0, 0, OledProtectYourTime, 128, 32, 1);
    }else if(DDoubleTime == 1 && rollS == 5 && (Dnum == 4 || Dnum ==7 || Dnum == 8 || Dnum == 11 || Dnum == 14 || Dnum == 17 || Dnum == 18 || Dnum == 21 || Dnum == 24 || Dnum == 27 || Dnum == 28 || Dnum == 31 || Dnum == 34 || Dnum == 37 || Dnum == 38 || Dnum == 1)){
                display4.drawBitmap(0, 0, OledDoubleTime, 128, 32, 1);
    }else if(DTimeBolt == 1 && rollS == 6 && (Dnum == 4 || Dnum == 8 || Dnum == 14 || Dnum == 18 || Dnum == 24 || Dnum == 28 || Dnum ==34 || Dnum == 38)){
                display4.drawBitmap(0, 0, OledTimeBolt, 128, 32, 1);
    }
  display4.display();
  delay(500);
    rollS=0;
    DHoldInTime = 0;
    DToxicZone = 0;
    DRewindTime = 0;
    DDoubleTime = 0;
    DTimeBolt = 0;
    }   //Check Freze 
    
 }while (next < 1);
}

//function-----------------------------------------------------------------------------------------------------------------------
//TheDimenstion
void TheDimenstion0(){
  display0.clearDisplay();
  display0.setCursor(0, 15); 
  display0.setTextColor(1,0);
  display0.setTextSize(2);
  display0.print("THE");
  display0.setCursor(0, 40);
  display0.println("DIMENSTION");
}
void TheDimenstion1 (){
  display1.clearDisplay();
  display1.setCursor(25,19);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println("THE DIMENSION");
}
void TheDimenstion2(){
  display2.clearDisplay();
  display2.setCursor(25, 19);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println("THE DIMENDTON");
}
void TheDimenstion3(){
  display3.clearDisplay();
  display3.setCursor(25,19);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println("THE DIMENSION");
}
void TheDimenstion4(){
  display4.clearDisplay();
  display4.setCursor(25, 19);
  display4.setTextColor(1);
  display4.setTextSize(1);
  display4.println("THE DIMENSION");
}

void SetPlayer1(){
  display1.clearDisplay();
  display1.setCursor(0, 1);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println("P1");
  display1.setCursor(0, 13);
  display1.setTextColor(1);
  display1.setTextSize(1);
  display1.println("HP");
  display1.setCursor(0, 25);
  display1.setTextColor(1);
  display1.setTextSize(1); 
  display1.println("GEM");
  display1.setCursor(34, 0);
  display1.setTextColor(2);
  display1.setTextSize(3);
  display1.println("(  )");
  display1.setCursor(54, 25);
  display1.setTextColor(1,0);
  display1.setTextSize(1);
  display1.println("[   ]");
}
void SetPlayer2(){
  display2.clearDisplay();
  display2.setCursor(0, 1);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println("P2");
  display2.setCursor(0, 13);
  display2.setTextColor(1);
  display2.setTextSize(1);
  display2.println("HP");
  display2.setCursor(0, 25);
  display2.setTextColor(1);
  display2.setTextSize(1); 
  display2.println("GEM");
  display2.setCursor(34, 0);
  display2.setTextColor(2);
  display2.setTextSize(3);
  display2.println("(  )");
  display2.setCursor(54, 25);
  display2.setTextColor(1,0);
  display2.setTextSize(1);
  display2.println("[   ]");
}
void SetPlayer3(){
  display3.clearDisplay();
  display3.setCursor(0, 1);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println("P3");
  display3.setCursor(0, 13);
  display3.setTextColor(1);
  display3.setTextSize(1);
  display3.println("HP");
  display3.setCursor(0, 25);
  display3.setTextColor(1);
  display3.setTextSize(1); 
  display3.println("GEM");
  display3.setCursor(34, 0);
  display3.setTextColor(2);
  display3.setTextSize(3);
  display3.println("(  )");
  display3.setCursor(54, 25);
  display3.setTextColor(1,0);
  display3.setTextSize(1);
  display3.println("[   ]");
}
void SetPlayer4(){
  display4.clearDisplay();
  display4.setCursor(0, 1);
  display4.setTextColor(1);
  display4.setTextSize(1);
  display4.println("P4");
  display4.setCursor(0, 13);
  display4.setTextColor(1);
  display4.setTextSize(1);
  display4.println("HP");
  display4.setCursor(0, 25);
  display4.setTextColor(1);
  display4.setTextSize(1); 
  display4.println("GEM");
  display4.setCursor(34, 0);
  display4.setTextColor(2);
  display4.setTextSize(3);
  display4.println("(  )");
  display4.setCursor(54, 25);
  display4.setTextColor(1,0);
  display4.setTextSize(1);
  display4.println("[   ]");
}
void Status_Shield4(){
  display4.fillTriangle(15,3,17,1,19,3,1); //.drawTriangle(x0,y0,x1,y1,x2,y2,color);
  display4.fillTriangle(15,3,17,6,19,3,1);
}
void Status_Shield3(){
  display3.fillTriangle(15,3,17,1,19,3,1); //.drawTriangle(x0,y0,x1,y1,x2,y2,color);
  display3.fillTriangle(15,3,17,6,19,3,1);
}
void Status_Shield2(){
  display2.fillTriangle(15,3,17,1,19,3,1); //.drawTriangle(x0,y0,x1,y1,x2,y2,color);
  display2.fillTriangle(15,3,17,6,19,3,1);
}
void Status_Shield1(){
  display1.fillTriangle(15,3,17,1,19,3,1); //.drawTriangle(x0,y0,x1,y1,x2,y2,color);
  display1.fillTriangle(15,3,17,6,19,3,1);
}
